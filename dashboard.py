import streamlit as st
import requests
import pandas as pd
from datetime import datetime

# ConfiguraÃ§Ãµes
BACKEND_URL = "http://localhost:5000"
st.set_page_config(
    layout="wide",
    page_title="Sentinel Fire",
    page_icon="ðŸ”¥"
)

# VariÃ¡vel de estado para controlar atualizaÃ§Ãµes
if 'last_update' not in st.session_state:
    st.session_state.last_update = datetime.now()

# FunÃ§Ã£o para forÃ§ar atualizaÃ§Ã£o
def atualizar_mapa():
    st.session_state.last_update = datetime.now()
    st.rerun()

# FunÃ§Ãµes para buscar dados da API
@st.cache_data(ttl=10)
def fetch_ocorrencias():
    try:
        response = requests.get(f"{BACKEND_URL}/ocorrencias")
        return response.json()["ocorrencias"] if response.ok else []
    except:
        return []

@st.cache_data(ttl=10)
def fetch_historico_drones():
    try:
        response = requests.get(f"{BACKEND_URL}/historico_drones")
        return response.json() if response.ok else {"historico": [], "total_acoes": 0}
    except:
        return {"historico": [], "total_acoes": 0}

# Layout do tÃ­tulo com logo
col1, col2 = st.columns([1, 10])
with col1:
    st.image("templates\logo.png", width=120 )# VocÃª pode substituir por seu prÃ³prio logo
with col2:
    st.title("Sentinel Fire Monitoring")


# Sidebar com controles e informaÃ§Ãµes
with st.sidebar:
    st.header("Controles")

    # BotÃ£o para atualizar o mapa
    if st.button("ðŸ”„ Atualizar Dados", on_click=atualizar_mapa):
        pass

    st.write(f"Ãšltima atualizaÃ§Ã£o: {st.session_state.last_update.strftime('%H:%M:%S')}")

    if st.button("Simular OcorrÃªncia"):
        try:
            response = requests.post(f"{BACKEND_URL}/simular", json={"quantidade": 1})
            if response.ok:
                st.success("OcorrÃªncia simulada com sucesso!")
                atualizar_mapa()
            else:
                st.error("Erro ao simular ocorrÃªncia")
        except:
            st.error("NÃ£o foi possÃ­vel conectar ao servidor")

    if st.button("Atender OcorrÃªncia"):
        try:
            response = requests.post(f"{BACKEND_URL}/atender")
            if response.ok:
                st.success("OcorrÃªncia atendida com sucesso!")
                atualizar_mapa()
            else:
                st.error("Nenhuma ocorrÃªncia para atender")
        except:
            st.error("NÃ£o foi possÃ­vel conectar ao servidor")

    # Mostrar informaÃ§Ãµes resumidas
    data = fetch_ocorrencias()
    df = pd.DataFrame(data)
    if not df.empty:
        st.header("Resumo")
        st.metric("Focos Ativos", len(df[df['status'] == "Fogo ativo"]))
        st.metric("MÃ¡xima Severidade", df['severidade'].max())

# Mapa principal
st.markdown(f"""
<div style="width:100%; height:600px; margin-top:20px;">
    <iframe src="{BACKEND_URL}/mapa?{st.session_state.last_update.timestamp()}" 
            width="100%" height="100%"></iframe>
</div>
""", unsafe_allow_html=True)

# Legenda do mapa
st.markdown("""
**Legenda do Mapa:**
- ðŸ”´ Marcador Vermelho: Fogo ativo
- ðŸŸ¢ Marcador Verde: Fogo apagado
- ðŸ”µ Marcador Azul: Equipe em aÃ§Ã£o
""")

# SeÃ§Ã£o do histÃ³rico de drones
st.header("ðŸ›¸ HistÃ³rico de AÃ§Ãµes dos Drones")
drones_data = fetch_historico_drones()
df_drones = pd.DataFrame(drones_data["historico"])

st.write("Ãšltima linha do DataFrame:", df_drones.iloc[-1] if not df_drones.empty else "DataFrame vazio")
st.write("Dados recebidos do histÃ³rico:", drones_data["historico"])
drones_data = fetch_historico_drones()
if not df_drones.empty:
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Total de AÃ§Ãµes", drones_data["total_acoes"])
    with col2:
        if 'acao' in df_drones.columns:
            st.metric("Ãšltima AÃ§Ã£o", df_drones.iloc[-1]["acao"])
        else:
            st.metric("Ãšltima AÃ§Ã£o", "N/A")
    st.dataframe(df_drones)
else:
    st.warning("Nenhuma aÃ§Ã£o de drone registrada")

# Lista de ocorrÃªncias (opcional)
if st.checkbox("Mostrar lista de ocorrÃªncias detalhada"):
    if not df.empty:
        st.dataframe(df)
    else:
        st.warning("Nenhuma ocorrÃªncia ativa no momento")

# SeÃ§Ã£o de focos apagados
st.header("ðŸ”¥ HistÃ³rico de Focos Apagados")
focos_apagados = [oc for oc in data if oc.get('status') == "Fogo apagado"]
if focos_apagados:
    st.write(f"Total de focos apagados: {len(focos_apagados)}")
    st.dataframe(pd.DataFrame(focos_apagados))
else:
    st.info("Nenhum fogo apagado recentemente")

# RodapÃ©
st.markdown("---")
st.markdown(f"ðŸ“… Ãšltima atualizaÃ§Ã£o do sistema: {datetime.now().strftime('%H:%M:%S')}")

#streamlit run dashboard.py


