#Nome: Larissa Pereira Biusse
#RM: 564068

import streamlit as st
import requests
import pandas as pd
from datetime import datetime

# ConfiguraÃ§Ãµes
BACKEND_URL = "http://localhost:5000"
st.set_page_config(
    layout="wide",
    page_title="Sentinel Fire",
    page_icon="ğŸ”¥"
)

# Inicializa variÃ¡vel de estado para controlar atualizaÃ§Ãµes
if 'last_update' not in st.session_state:
    st.session_state.last_update = datetime.now()

# FunÃ§Ã£o para forÃ§ar atualizaÃ§Ã£o da pÃ¡gina
def atualizar_mapa():
    st.session_state.last_update = datetime.now()
    st.rerun()

# FunÃ§Ã£o genÃ©rica para chamadas ao backend
def chamar_backend(endpoint, method='get', json_data=None):
    url = f"{BACKEND_URL}/{endpoint}"
    try:
        if method == 'get':
            response = requests.get(url)
        elif method == 'post':
            response = requests.post(url, json=json_data)
        else:
            return None, "MÃ©todo HTTP nÃ£o suportado"
        if response.ok:
            return response.json(), None
        else:
            return None, f"Erro: {response.status_code}"
    except Exception as e:
        return None, str(e)

# FunÃ§Ãµes para buscar dados da API com cache
@st.cache_data(ttl=10)
def fetch_ocorrencias():
    data, erro = chamar_backend("ocorrencias")
    return data["ocorrencias"] if data and "ocorrencias" in data else []

@st.cache_data(ttl=10)
def fetch_historico_drones():
    data, erro = chamar_backend("historico_drones")
    return data if data else {"historico": [], "total_acoes": 0}

# Layout do tÃ­tulo com logo
col1, col2 = st.columns([1, 10])
with col1:
    st.image("templates/logo.png", width=120)  # Ajuste na barra invertida para barra normal
with col2:
    st.title("Sentinel Fire Monitoring")

# Sidebar com controles e informaÃ§Ãµes
with st.sidebar:
    st.header("Controles")

    if st.button("ğŸ”„ Atualizar Dados", on_click=atualizar_mapa):
        pass

    st.write(f"Ãšltima atualizaÃ§Ã£o: {st.session_state.last_update.strftime('%H:%M:%S')}")

    if st.button("Simular OcorrÃªncia"):
        _, erro = chamar_backend("simular", method="post", json_data={"quantidade": 1})
        if erro:
            st.error(f"Erro ao simular ocorrÃªncia: {erro}")
        else:
            st.success("OcorrÃªncia simulada com sucesso!")
            atualizar_mapa()

    if st.button("Atender OcorrÃªncia"):
        _, erro = chamar_backend("atender", method="post")
        if erro:
            st.error(f"Erro ao atender ocorrÃªncia: {erro}")
        else:
            st.success("OcorrÃªncia atendida com sucesso!")
            atualizar_mapa()

    # Mostrar informaÃ§Ãµes resumidas
    data = fetch_ocorrencias()
    df = pd.DataFrame(data)
    if not df.empty:
        st.header("Resumo")
        st.metric("Focos Ativos", len(df[df['status'] == "Fogo ativo"]))
        st.metric("MÃ¡xima Severidade", df['severidade'].max())

# Mapa principal com iframe
iframe_src = f"{BACKEND_URL}/mapa?{st.session_state.last_update.timestamp()}"
st.markdown(f"""
<div style="width:100%; height:600px; margin-top:20px;">
    <iframe src="{iframe_src}" width="100%" height="100%" frameborder="0"></iframe>
</div>
""", unsafe_allow_html=True)

# Legenda do mapa
st.markdown("""
**Legenda do Mapa:**
- ğŸ”´ Marcador Vermelho: Fogo ativo
- ğŸŸ¢ Marcador Verde: Fogo apagado
- ğŸ”µ Marcador Azul: Equipe em aÃ§Ã£o
""")

# SeÃ§Ã£o do histÃ³rico de drones
st.header("ğŸ›¸ HistÃ³rico de AÃ§Ãµes dos Drones")
drones_data = fetch_historico_drones()
df_drones = pd.DataFrame(drones_data.get("historico", []))

if not df_drones.empty:
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Total de AÃ§Ãµes", drones_data.get("total_acoes", 0))
    with col2:
        if 'acao' in df_drones.columns:
            st.metric("Ãšltima AÃ§Ã£o", df_drones.iloc[-1]["acao"])
        else:
            st.metric("Ãšltima AÃ§Ã£o", "N/A")
    st.dataframe(df_drones)
else:
    st.warning("Nenhuma aÃ§Ã£o de drone registrada")

# Lista de ocorrÃªncias detalhada (opcional)
if st.checkbox("Mostrar lista de ocorrÃªncias detalhada"):
    if not df.empty:
        st.dataframe(df)
    else:
        st.warning("Nenhuma ocorrÃªncia ativa no momento")

# SeÃ§Ã£o de focos apagados
st.header("ğŸ”¥ HistÃ³rico de Focos Apagados")
focos_apagados = [oc for oc in data if oc.get('status') == "Fogo apagado"]
if focos_apagados:
    st.write(f"Total de focos apagados: {len(focos_apagados)}")
    st.dataframe(pd.DataFrame(focos_apagados))
else:
    st.info("Nenhum fogo apagado recentemente")

# RodapÃ© com Ãºltima atualizaÃ§Ã£o do sistema
st.markdown("---")
st.markdown(f"ğŸ“… Ãšltima atualizaÃ§Ã£o do sistema: {datetime.now().strftime('%H:%M:%S')}")



